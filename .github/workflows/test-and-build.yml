name: Test and Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: "2.1.3"

      - name: Validate lockfile compatibility
        run: |
          echo "🔍 Validating deno.lock compatibility..."
          if [ -f "deno.lock" ]; then
            LOCKFILE_VERSION=$(jq -r '.version' deno.lock)
            echo "Lockfile version: $LOCKFILE_VERSION"

            # Deno 2.x uses lockfile version 4
            if [ "$LOCKFILE_VERSION" != "4" ]; then
              echo "❌ Error: Lockfile version $LOCKFILE_VERSION is not compatible with Deno 2.x"
              echo "Expected: version 4"
              echo "Please regenerate the lockfile with: rm deno.lock && deno cache src/main.ts"
              exit 1
            fi

            echo "✅ Lockfile version is compatible"
          else
            echo "⚠️ No lockfile found - dependencies will be downloaded fresh"
          fi

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-2.1.3-${{ hashFiles('deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-2.1.3-
            ${{ runner.os }}-deno-

      - name: Check formatting
        run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Type check
        run: deno check src/main.ts

      - name: Run tests
        run: deno task test

      - name: Test build
        run: deno task build

      - name: Test binary (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x bin/brain
          ./bin/brain --version

      - name: Test binary (Windows)
        if: runner.os == 'Windows'
        run: |
          .\bin\brain.exe --version

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: "2.1.3"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check for vulnerabilities
        run: |
          # Check for known security issues in dependencies
          deno info --json src/main.ts | jq '.modules[].specifier' | grep -E '^https?://' | sort -u > external_deps.txt || echo "No external dependencies found"
          echo "External dependencies:"
          cat external_deps.txt || echo "None"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
