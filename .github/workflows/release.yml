name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  actions: read
  checks: read

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version from deno.json or input
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual dispatch - use provided version
            VERSION="${{ inputs.version }}"
            if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
              echo "Error: Invalid version format. Expected: v1.2.3 or v1.2.3-beta.1"
              exit 1
            fi
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          else
            # Tag push - extract from tag
            TAG=${GITHUB_REF#refs/tags/}
            if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
              echo "Error: Invalid tag format. Expected: v1.2.3 or v1.2.3-beta.1"
              exit 1
            fi
            VERSION=${TAG#v}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
          fi
          
          # Validate version exists in deno.json
          DENO_VERSION=$(jq -r '.version' deno.json)
          if [[ "$DENO_VERSION" == "null" ]]; then
            echo "Error: No version field found in deno.json"
            exit 1
          fi
          
          # Check if versions match (for tag pushes)
          if [[ "${{ github.event_name }}" == "push" && "$VERSION" != "$DENO_VERSION" ]]; then
            echo "Warning: Tag version ($VERSION) doesn't match deno.json version ($DENO_VERSION)"
            echo "Using tag version for consistency"
          fi
          
          echo "Releasing version: $VERSION"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
          
      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-
            
      - name: Run tests
        run: deno task test

  build:
    name: Build Cross-Platform Binaries
    runs-on: ${{ matrix.os }}
    needs: [validate-version, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: brain-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: brain-mac
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: brain-mac-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: brain.exe
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
          
      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-
            
      - name: Build binary
        run: |
          deno compile \
            --allow-read \
            --allow-write \
            --allow-run \
            --allow-net \
            --allow-env \
            --target ${{ matrix.target }} \
            --output bin/${{ matrix.artifact }} \
            src/main.ts
            
      - name: Test binary (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x bin/${{ matrix.artifact }}
          ./bin/${{ matrix.artifact }} --version
          
      - name: Test binary (Windows)
        if: runner.os == 'Windows'
        run: |
          .\bin\${{ matrix.artifact }} --version
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: bin/${{ matrix.artifact }}
          retention-days: 7

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy binaries to release directory
          cp artifacts/brain-linux/brain-linux release-assets/
          cp artifacts/brain-mac/brain-mac release-assets/
          cp artifacts/brain-mac-arm64/brain-mac-arm64 release-assets/
          cp artifacts/brain.exe/brain.exe release-assets/
          
          # Make Unix binaries executable
          chmod +x release-assets/brain-linux
          chmod +x release-assets/brain-mac
          chmod +x release-assets/brain-mac-arm64
          
          # Generate checksums
          cd release-assets
          sha256sum * > checksums.txt
          cd ..
          
          # Create installation script
          cat > release-assets/install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Brain CLI Installation Script
          echo "🧠 Brain CLI Installer"
          echo "====================="
          
          # Detect OS and architecture
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          case "$OS" in
            linux*)
              BINARY="brain-linux"
              ;;
            darwin*)
              if [[ "$ARCH" == "arm64" ]]; then
                BINARY="brain-mac-arm64"
              else
                BINARY="brain-mac"
              fi
              ;;
            *)
              echo "❌ Unsupported OS: $OS"
              exit 1
              ;;
          esac
          
          echo "Detected platform: $OS-$ARCH"
          echo "Installing binary: $BINARY"
          
          # Download and install
          INSTALL_DIR="$HOME/.local/bin"
          mkdir -p "$INSTALL_DIR"
          
          if command -v curl >/dev/null 2>&1; then
            curl -L "https://github.com/${{ github.repository }}/releases/latest/download/$BINARY" -o "$INSTALL_DIR/brain"
          elif command -v wget >/dev/null 2>&1; then
            wget "https://github.com/${{ github.repository }}/releases/latest/download/$BINARY" -O "$INSTALL_DIR/brain"
          else
            echo "❌ Neither curl nor wget found. Please install one of them."
            exit 1
          fi
          
          chmod +x "$INSTALL_DIR/brain"
          
          echo "✅ Brain CLI installed to $INSTALL_DIR/brain"
          echo ""
          echo "Add $INSTALL_DIR to your PATH if it's not already there:"
          echo "  echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.bashrc"
          echo "  source ~/.bashrc"
          echo ""
          echo "Test your installation:"
          echo "  brain --version"
          EOF
          
          chmod +x release-assets/install.sh
          
      - name: Generate release notes
        id: release-notes
        run: |
          cat > release-notes.md << EOF
          # Brain CLI ${{ needs.validate-version.outputs.tag }}
          
          ## 🎉 What's New
          
          This release includes:
          - Core CLI functionality for capturing and resuming development context
          - AI-powered context analysis with OpenAI integration
          - Git integration for automatic repository state detection
          - Cross-platform support (Linux, macOS Intel/ARM, Windows)
          
          ## 📦 Installation
          
          ### Quick Install (Linux/macOS)
          \`\`\`bash
          curl -sSL https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-version.outputs.tag }}/install.sh | bash
          \`\`\`
          
          ### Manual Download
          
          Download the appropriate binary for your platform:
          
          - **Linux (x64)**: [brain-linux](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-version.outputs.tag }}/brain-linux)
          - **macOS (Intel)**: [brain-mac](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-version.outputs.tag }}/brain-mac)
          - **macOS (ARM64)**: [brain-mac-arm64](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-version.outputs.tag }}/brain-mac-arm64)
          - **Windows**: [brain.exe](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-version.outputs.tag }}/brain.exe)
          
          ### Verification
          
          Verify your download with the provided checksums:
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`
          
          ## 🚀 Quick Start
          
          1. Configure your OpenAI API key:
             \`\`\`bash
             brain config set openai-key sk-your-api-key-here
             \`\`\`
          
          2. Save your current context:
             \`\`\`bash
             brain save "debugging authentication middleware"
             \`\`\`
          
          3. Resume where you left off:
             \`\`\`bash
             brain resume
             \`\`\`
          
          ## 📋 Full Command Reference
          
          - \`brain save <message>\` - Save current context with your notes
          - \`brain resume\` - Show last context with AI analysis
          - \`brain list [count]\` - View recent context history
          - \`brain config set <key> <value>\` - Configure settings
          - \`brain --help\` - Show detailed help
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.0...${{ needs.validate-version.outputs.tag }}
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-version.outputs.tag }}
          name: Brain CLI ${{ needs.validate-version.outputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.validate-version.outputs.tag, '-') }}
          files: |
            release-assets/*
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update installation documentation
        run: |
          echo "✅ Release ${{ needs.validate-version.outputs.tag }} created successfully!"
          echo ""
          echo "📋 Release Summary:"
          echo "  Version: ${{ needs.validate-version.outputs.version }}"
          echo "  Tag: ${{ needs.validate-version.outputs.tag }}"
          echo "  Prerelease: ${{ contains(needs.validate-version.outputs.tag, '-') }}"
          echo ""
          echo "📦 Assets included:"
          ls -la release-assets/
          echo ""
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-version.outputs.tag }}"